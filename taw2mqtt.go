package main

import (
	"log"
	"time"

	"github.com/tarm/serial"
)

var panasonicQuery []byte = []byte{0x71, 0x6c, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
var optionalPCBQuery []byte = []byte{0xF1, 0x11, 0x01, 0x50, 0x00, 0x00, 0x40, 0xFF, 0xFF, 0xE5, 0xFF, 0xFF, 0x00, 0xFF, 0xEB, 0xFF, 0xFF, 0x00, 0x00}
var config configStruct

var serialPort *serial.Port
var commandsChannel chan []byte

func main() {
	config = readConfig()
	go updateConfigLoop()

	serialConfig := &serial.Config{Name: config.Device, Baud: 9600, Parity: serial.ParityEven, StopBits: serial.Stop1, ReadTimeout: 5 * time.Second}
	var err error
	serialPort, err = serial.OpenPort(serialConfig)
	if err != nil {
		log.Println(err)
	}

	commandsChannel = make(chan []byte, 100)
	poolInterval := time.Second * time.Duration(config.ReadInterval)
	loadTopics()
	mclient := makeMQTTConn()
	if config.HAAutoDiscover == true {
		publishDiscoveryTopics(mclient)
	}

	for {
		var queueLen = len(commandsChannel)
		if queueLen > 50 {
			log.Println("Command queue length: ", len(commandsChannel))
		}

		select {
		case value := <-commandsChannel:
			sendCommand(value)
			time.Sleep(time.Second * time.Duration(config.SleepAfterCommand))

		default:
			sendCommand(panasonicQuery)
			//sendCommand()optionalPCBQuery
		}

		readSerial(mclient)
		time.Sleep(poolInterval)
	}
}
